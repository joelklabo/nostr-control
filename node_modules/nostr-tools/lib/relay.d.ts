import { Event } from './event';
import { Filter } from './filter';
type RelayEvent = {
    connect: () => void | Promise<void>;
    disconnect: () => void | Promise<void>;
    error: () => void | Promise<void>;
    notice: (msg: string) => void | Promise<void>;
};
type SubEvent = {
    event: (event: Event) => void | Promise<void>;
    eose: () => void | Promise<void>;
};
export type Relay = {
    url: string;
    status: number;
    connect: () => Promise<void>;
    close: () => void;
    sub: (filters: Filter[], opts?: SubscriptionOptions) => Sub;
    list: (filters: Filter[], opts?: SubscriptionOptions) => Promise<Event[]>;
    get: (filter: Filter, opts?: SubscriptionOptions) => Promise<Event | null>;
    publish: (event: Event) => Pub;
    off: <T extends keyof RelayEvent, U extends RelayEvent[T]>(event: T, listener: U) => void;
    on: <T extends keyof RelayEvent, U extends RelayEvent[T]>(event: T, listener: U) => void;
};
export type Pub = {
    on: (type: 'ok' | 'failed', cb: any) => void;
    off: (type: 'ok' | 'failed', cb: any) => void;
};
export type Sub = {
    sub: (filters: Filter[], opts: SubscriptionOptions) => Sub;
    unsub: () => void;
    on: <T extends keyof SubEvent, U extends SubEvent[T]>(event: T, listener: U) => void;
    off: <T extends keyof SubEvent, U extends SubEvent[T]>(event: T, listener: U) => void;
};
export type SubscriptionOptions = {
    id?: string;
    skipVerification?: boolean;
    alreadyHaveEvent?: null | ((id: string, relay: string) => boolean);
};
export declare function relayInit(url: string, options?: {
    getTimeout?: number;
    listTimeout?: number;
}): Relay;
export {};
