"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariadicMutableSingleton = void 0;
//================================================================
/**
 * @packageDocumentation
 * @module std
 */
//================================================================
var HashMap_1 = require("../container/HashMap");
var MutableSingleton_1 = require("./MutableSingleton");
var iterations_1 = require("../ranges/algorithm/iterations");
var hash_1 = require("../functional/hash");
/**
 * Variadic mutable singleton generator.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
var VariadicMutableSingleton = /** @class */ (function () {
    /* ---------------------------------------------------------------
        CONSTRUCTORS
    --------------------------------------------------------------- */
    function VariadicMutableSingleton(closure, hashFunc, pred) {
        if (hashFunc === void 0) { hashFunc = function (args) { return hash_1.hash.apply(void 0, __spreadArray([], __read(args), false)); }; }
        if (pred === void 0) { pred = iterations_1.equal; }
        this.closure_ = closure;
        this.dict_ = new HashMap_1.HashMap(hashFunc, pred);
    }
    VariadicMutableSingleton.prototype.set = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var args = items.slice(0, items.length - 1);
        var value = items[items.length - 1];
        return this._Get_singleton(args).set(value);
    };
    VariadicMutableSingleton.prototype.reload = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this._Get_singleton(args)).reload.apply(_a, __spreadArray([], __read(args), false));
    };
    VariadicMutableSingleton.prototype.clear = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(args.length === 0)) return [3 /*break*/, 1];
                        this.dict_.clear();
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this._Get_singleton(args).clear()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /* ---------------------------------------------------------------
        ACCESSORS
    --------------------------------------------------------------- */
    VariadicMutableSingleton.prototype.get = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this._Get_singleton(args)).get.apply(_a, __spreadArray([], __read(args), false));
    };
    VariadicMutableSingleton.prototype.is_loaded = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._Get_singleton(args).is_loaded();
    };
    /**
     * @hidden
     */
    VariadicMutableSingleton.prototype._Get_singleton = function (args) {
        var it = this.dict_.find(args);
        if (it.equals(this.dict_.end()) === true)
            it = this.dict_.emplace(args, new MutableSingleton_1.MutableSingleton(this.closure_)).first;
        return it.second;
    };
    return VariadicMutableSingleton;
}());
exports.VariadicMutableSingleton = VariadicMutableSingleton;
//# sourceMappingURL=VariadicMutableSingleton.js.map